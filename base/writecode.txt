logger = logging.getLogger('base')


class UserProfile(models.Model):
    user = models.OneToOneField(User, on_delete=models.CASCADE)
    course = models.ManyToManyField(Course, blank=True)
    date = models.DateTimeField(auto_now=True)
    credits = models.DecimalField(max_digits=8, decimal_places=2, default=0)
    free_credits = models.DecimalField(max_digits=8, decimal_places=2, default=18000)  # 5 hours in seconds
    

    def deduct_credits(self, duration):
        if self.credits >= duration:
            self.credits -= duration
        else:
            remaining_duration = duration - self.credits
            self.credits = 0
            if self.free_credits >= remaining_duration:
                self.free_credits -= remaining_duration
            else:
                self.free_credits = 0

        self.save()


    def start_of_month(self):
        now = timezone.now()
        start_of_month = now.replace(day=1, hour=0, minute=0, second=0, microsecond=0)

        if self.date.date() != start_of_month.date():
            logger.info(f"Updating free_credits at the start of the month on {now}...")
            self.free_credits = 18000
            self.date = now
        else:
            pass


    def save(self, *args, **kwargs):
        is_new = self._state.adding
        if is_new:
            self.start_of_month()
        super().save(*args, **kwargs)

    def __str__(self):
        return str(self.user)




